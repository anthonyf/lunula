(in-package :lunula)

(defmacro defstruct (name-and-options &rest slot-descriptions)
  (let* ((name (cond ((symbolp name-and-options)
                      name-and-options)
                     ((listp name-and-options)
                      (first name-and-options))
                     (t (error "invalid struct name"))))
         (constructor-name (intern (concatenate 'string "MAKE-" (symbol-name name))))
         (slot-names (mapcar (lambda (slot-description)
                               (cond ((symbolp slot-description)
                                      slot-description)
                                     ((listp slot-description)
                                      (car slot-description))
                                     (t (error "invalid slot description"))))
                             slot-descriptions))
         (slot-indices (mapcar (lambda (i)
                                 (+ 2 i))
                               (itoa-list (length slot-descriptions)))))
    `(progn
       (defun ,constructor-name (&key ,@slot-names)
         (vector ',name :struct ,@slot-names))
       ,@(mapcar (lambda (slot-name slot-index)
                   (let ((accessor-name (intern (concatenate 'string
                                                             (symbol-name name) "-"
                                                             (symbol-name slot-name)))))
                     `(progn (defun ,accessor-name (instance)
                               (svref instance ,slot-index))
                             (defun (setf ,accessor-name) (value instance)
                               (setf (svref instance ,slot-index) value)))))
                 slot-names slot-indices)
       ',name)))

